<?php

/**
 * @file
 * Provides a Solr-based service class for the Search API.
 */

/**
 * Implements hook_menu().
 */
function search_api_solr_menu() {
  return array(
    'admin/config/search/search_api/server/%search_api_server/files' => array(
      'title' => 'Files',
      'description' => 'View server solr configuration files.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('search_api_solr_solr_config_form', 5),
      'access arguments' => array('administer search_api'),
      'file' => 'search_api_solr.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => -1,
    ),
  );
}

/**
 * Implements hook_search_api_service_info().
 */
function search_api_solr_search_api_service_info() {
  $services['search_api_solr_service'] = array(
    'name' => t('Solr service'),
    'description' => t('<p>Index items using an Apache Solr search server.</p>
        <ul><li>All field types are supported and indexed in a special way, with URI/String and Integer/Duration being equivalent.</li>
        <li>See <a href="@url">the Solr wiki</a> for information about the "direct" parse mode.</li>
        <li>Supports the search_api_facets and search_api_multi features.</li>
        <li>Will use internal Solr preprocessors, so Search API preprocessors should for the most part be deactivated.</li>
        <li>See the README.txt file provided with this module for details.</li></ul>',
        array('@url' => url('http://wiki.apache.org/solr/SolrQuerySyntax'))),
    'class' => 'SearchApiSolrService',
  );
  return $services;
}

/**
 * Implements hook_help().
 */
function search_api_solr_help($path, array $arg = array()) {
  if ($path == 'admin/config/search/search_api') {
    // Included because we need the REQUIREMENT_* constants.
    include_once(DRUPAL_ROOT . '/includes/install.inc');
    module_load_include('install', 'search_api_solr');
    $reqs = search_api_solr_requirements('runtime');
    foreach ($reqs as $req) {
      if (isset($req['description'])) {
        $type = $req['severity'] == REQUIREMENT_ERROR ? 'error' : ($req['severity'] == REQUIREMENT_WARNING ? 'warning' : 'status');
        drupal_set_message($req['description'], $type);
      }
    }
  }
  elseif ($path == 'admin/config/search/search_api/server/%' && !empty($arg[5])) {
    $server = search_api_server_load($arg[5]);
    if ($server && $server->enabled && $server->class == 'search_api_solr_service') {
      $ping = $server->ping();
      $type = $ping ? 'status' : 'error';
      if ($ping) {
        $msg = t('The Solr server could be reached (latency: @millisecs ms).', array('@millisecs' => $ping * 1000));
      }
      else {
        $msg = t('The Solr server could not be reached.');
      }
      drupal_set_message($msg, $type);
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Used to execute an optimization operation on all enabled Solr servers once a
 * day.
 */
function search_api_solr_cron() {
  if (REQUEST_TIME - variable_get('search_api_solr_last_optimize', 0) > 86400) {
    variable_set('search_api_solr_last_optimize', REQUEST_TIME);
    $conditions = array('class' => 'search_api_solr_service', 'enabled' => TRUE);
    foreach (search_api_server_load_multiple(FALSE, $conditions) as $server) {
      try {
        $server->getSolrConnection()->optimize(FALSE, FALSE);
      }
      catch(Exception $e) {
        watchdog_exception('search_api_solr', $e, '%type while optimizing Solr server @server: !message in %function (line %line of %file).', array('@server' => $server->name));
      }
    }
  }
}

/**
 * Implements hook_flush_caches().
 */
function search_api_solr_flush_caches() {
  return array('cache_search_api_solr');
}


/**
 * Implements hook_search_api_server_update().
 */
function search_api_solr_search_api_server_update(SearchApiServer $server) {
  if ($server->class === 'search_api_solr_service') {
    $server->getSolrConnection()->clearCache();
  }
}

/**
 * Retrieves content of the file when name has been specified or list of files.
 *
 * @param string $server_name
 *   Name of the target SearchAPI server.
 * @param string $file_name
 *   Name of the file to retrieve or empty string for the list of files.
 *
 * @return mixed
 *   Response object or NULL in case of error.
 */
function search_api_solr_server_get_file($server_name, $file_name = '') {

  $server = search_api_server_load($server_name);

  $uri  = 'http://' . $server->options['host'] . ':' . $server->options['port'] . $server->options['path'];
  $uri .= '/' . SearchApiSolrConnection::FILE_SERVLET . '?contentType=text/xml;charset=utf-8&file=' . $file_name;

  try {
    switch ($server->class) {
      case 'search_api_solr_service':
        // Search API Solr Service.
        $service  = new SearchApiSolrService($server);

        $response = $server->getFile($file_name);
        break;

      case 'acquia_search_service':
        // Acquia Search Service.
        $service = new SearchApiAcquiaSearchHttpTransport();

        if ($server->options['http_method'] == 'GET') {
          $response = $service->performGetRequest($uri);
        }
        else {
          $response = $service->performPostRequest($uri);
        }
        break;

      default:
        drupal_set_message(t('Search API server class not supported (%class)!', array("%class" => $server->class)), 'error');
        return;
    }
  }
  catch (SearchAPIException $e) {
    // An error occured.
    drupal_set_message($e->getMessage(), 'error');
    return NULL;
  }

  $get_single_file = empty($response->files);

  if ($get_single_file) {
    return $response->data;
  }
  else {
    // Searching for directories and recursively merging directory files.
    $files_data = json_decode($response->data, TRUE);
    $files_list = $files_data['files'];
    $result     = $files_list;

    foreach ($files_list as $files_list_file_name => $files_list_file_info) {
      if (!empty($files_list_file_info['directory'])) {
        unset($files_list[$files_list_file_name]);
        // Searching for directories and recursively merging directory files.
        $folder_files_list = search_api_solr_server_get_file($server->name, $files_list_file_name);

        $result = array_merge($result, $folder_files_list);
      }
    }

    return $result;
  }
}
